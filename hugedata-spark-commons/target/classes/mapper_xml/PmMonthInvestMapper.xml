<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.hugedata.spark.commons.storage.mapper.PmMonthInvestMapper" >
  <resultMap id="BaseResultMap" type="cn.com.hugedata.spark.commons.storage.entity.PmMonthInvest" >
    <id column="INVEST_ID" property="investId" jdbcType="INTEGER" />
    <result column="REPORT_ID" property="reportId" jdbcType="INTEGER" />
    <result column="COME_TYPE_ID" property="comeTypeId" jdbcType="INTEGER" />
    <result column="COME_TYPE_NAME" property="comeTypeName" jdbcType="VARCHAR" />
    <result column="COME_FROM" property="comeFrom" jdbcType="VARCHAR" />
    <result column="AMOUNT" property="amount" jdbcType="DOUBLE" />
    <result column="PROJECT_ID" property="projectId" jdbcType="INTEGER" />
    <result column="INVEST_MONTH" property="investMonth" jdbcType="CHAR" />
    <result column="INVEST_STATUS" property="investStatus" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Map_Where_Clause" >
    <if test="null != investId" >
      and pmi.INVEST_ID = #{investId}
    </if>
    <if test="null != ne_investId" >
      and pmi.INVEST_ID != #{ne_investId}
    </if>
    <if test="null != list_investId" >
      and pmi.INVEST_ID in (<foreach collection="list_investId" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != reportId" >
      and pmi.REPORT_ID = #{reportId}
    </if>
    <if test="null != ne_reportId" >
      and pmi.REPORT_ID != #{ne_reportId}
    </if>
    <if test="null != list_reportId" >
      and pmi.REPORT_ID in (<foreach collection="list_reportId" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != comeTypeId" >
      and pmi.COME_TYPE_ID = #{comeTypeId}
    </if>
    <if test="null != ne_comeTypeId" >
      and pmi.COME_TYPE_ID != #{ne_comeTypeId}
    </if>
    <if test="null != list_comeTypeId" >
      and pmi.COME_TYPE_ID in (<foreach collection="list_comeTypeId" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != comeTypeName" >
      and pmi.COME_TYPE_NAME = #{comeTypeName}
    </if>
    <if test="null != ne_comeTypeName" >
      and pmi.COME_TYPE_NAME != #{ne_comeTypeName}
    </if>
    <if test="null != like_comeTypeName" >
      and pmi.COME_TYPE_NAME like CONCAT('%', #{like_comeTypeName}, '%')
    </if>
    <if test="null != list_comeTypeName" >
      and pmi.COME_TYPE_NAME in (<foreach collection="list_comeTypeName" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != begin_comeTypeName" >
      and pmi.COME_TYPE_NAME &gt;= #{begin_comeTypeName}
    </if>
    <if test="null != end_comeTypeName" >
      and pmi.COME_TYPE_NAME &lt;= #{end_comeTypeName}
    </if>
    <if test="null != comeFrom" >
      and pmi.COME_FROM = #{comeFrom}
    </if>
    <if test="null != ne_comeFrom" >
      and pmi.COME_FROM != #{ne_comeFrom}
    </if>
    <if test="null != like_comeFrom" >
      and pmi.COME_FROM like CONCAT('%', #{like_comeFrom}, '%')
    </if>
    <if test="null != list_comeFrom" >
      and pmi.COME_FROM in (<foreach collection="list_comeFrom" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != begin_comeFrom" >
      and pmi.COME_FROM &gt;= #{begin_comeFrom}
    </if>
    <if test="null != end_comeFrom" >
      and pmi.COME_FROM &lt;= #{end_comeFrom}
    </if>
    <if test="null != amount" >
      and pmi.AMOUNT = #{amount}
    </if>
    <if test="null != ne_amount" >
      and pmi.AMOUNT != #{ne_amount}
    </if>
    <if test="null != list_amount" >
      and pmi.AMOUNT in (<foreach collection="list_amount" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != projectId" >
      and pmi.PROJECT_ID = #{projectId}
    </if>
    <if test="null != ne_projectId" >
      and pmi.PROJECT_ID != #{ne_projectId}
    </if>
    <if test="null != list_projectId" >
      and pmi.PROJECT_ID in (<foreach collection="list_projectId" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != investMonth" >
      and pmi.INVEST_MONTH = #{investMonth}
    </if>
    <if test="null != ne_investMonth" >
      and pmi.INVEST_MONTH != #{ne_investMonth}
    </if>
    <if test="null != like_investMonth" >
      and pmi.INVEST_MONTH like CONCAT('%', #{like_investMonth}, '%')
    </if>
    <if test="null != list_investMonth" >
      and pmi.INVEST_MONTH in (<foreach collection="list_investMonth" item="i" separator=",">#{i}</foreach>)
    </if>
    <if test="null != begin_investMonth" >
      and pmi.INVEST_MONTH &gt;= #{begin_investMonth}
    </if>
    <if test="null != end_investMonth" >
      and pmi.INVEST_MONTH &lt;= #{end_investMonth}
    </if>
    <if test="null != investStatus" >
      and pmi.INVEST_STATUS = #{investStatus}
    </if>
    <if test="null != ne_investStatus" >
      and pmi.INVEST_STATUS != #{ne_investStatus}
    </if>
    <if test="null != list_investStatus" >
      and pmi.INVEST_STATUS in (<foreach collection="list_investStatus" item="i" separator=",">#{i}</foreach>)
    </if>
  </sql>
  <sql id="Order_By_Clause" >
    <if test="null != order" >
      <trim prefix="order by " >
        <foreach collection="order" item="orderItem" separator="," >
          <if test="'investId' == orderItem.column" >
            pmi.INVEST_ID ${orderItem.dir}
          </if>
          <if test="'reportId' == orderItem.column" >
            pmi.REPORT_ID ${orderItem.dir}
          </if>
          <if test="'comeTypeId' == orderItem.column" >
            pmi.COME_TYPE_ID ${orderItem.dir}
          </if>
          <if test="'comeTypeName' == orderItem.column" >
            pmi.COME_TYPE_NAME ${orderItem.dir}
          </if>
          <if test="'comeFrom' == orderItem.column" >
            pmi.COME_FROM ${orderItem.dir}
          </if>
          <if test="'amount' == orderItem.column" >
            pmi.AMOUNT ${orderItem.dir}
          </if>
          <if test="'projectId' == orderItem.column" >
            pmi.PROJECT_ID ${orderItem.dir}
          </if>
          <if test="'investMonth' == orderItem.column" >
            pmi.INVEST_MONTH ${orderItem.dir}
          </if>
          <if test="'investStatus' == orderItem.column" >
            pmi.INVEST_STATUS ${orderItem.dir}
          </if>
        </foreach>
      </trim>
    </if>
  </sql>
  <sql id="Base_Column_List" >
    pmi.INVEST_ID, pmi.REPORT_ID, pmi.COME_TYPE_ID, pmi.COME_TYPE_NAME, pmi.COME_FROM, 
    pmi.AMOUNT, pmi.PROJECT_ID, pmi.INVEST_MONTH, pmi.INVEST_STATUS
  </sql>
  <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pm_month_invest pmi
    where pmi.INVEST_ID = #{investId,jdbcType=INTEGER}
  </select>
  <select id="selectByMap" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from pm_month_invest pmi
    <where >
      <include refid="Map_Where_Clause" />
    </where>
    <include refid="Order_By_Clause" />
  </select>
  <select id="countByMap" resultType="java.lang.Integer" parameterType="map" >
    select count(1)
    from pm_month_invest pmi
    <where >
      <include refid="Map_Where_Clause" />
    </where>
  </select>
  <insert id="insertSelective" parameterType="cn.com.hugedata.spark.commons.storage.entity.PmMonthInvest" >
    <selectKey resultType="java.lang.Integer" keyProperty="investId" order="AFTER" >
      select @@identity
    </selectKey>
    insert into pm_month_invest
    <trim prefix="(" suffix=")" suffixOverrides="," >
      INVEST_ID,
      <if test="reportId != null" >
        REPORT_ID,
      </if>
      <if test="comeTypeId != null" >
        COME_TYPE_ID,
      </if>
      <if test="comeTypeName != null" >
        COME_TYPE_NAME,
      </if>
      <if test="comeFrom != null" >
        COME_FROM,
      </if>
      <if test="amount != null" >
        AMOUNT,
      </if>
      <if test="projectId != null" >
        PROJECT_ID,
      </if>
      <if test="investMonth != null" >
        INVEST_MONTH,
      </if>
      <if test="investStatus != null" >
        INVEST_STATUS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{investId,jdbcType=INTEGER},
      <if test="reportId != null" >
        #{reportId,jdbcType=INTEGER},
      </if>
      <if test="comeTypeId != null" >
        #{comeTypeId,jdbcType=INTEGER},
      </if>
      <if test="comeTypeName != null" >
        #{comeTypeName,jdbcType=VARCHAR},
      </if>
      <if test="comeFrom != null" >
        #{comeFrom,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="projectId != null" >
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="investMonth != null" >
        #{investMonth,jdbcType=CHAR},
      </if>
      <if test="investStatus != null" >
        #{investStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <delete id="deleteById" parameterType="java.lang.Integer" >
    delete from pm_month_invest
    where INVEST_ID = #{investId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByIds" >
    delete from pm_month_invest where INVEST_ID in 
    <foreach collection="list" item="id" open="(" separator="," close=")" >
      #{id}
    </foreach>
  </delete>
  <delete id="deleteByMap" >
    delete from pmi using (pm_month_invest as pmi) 
    <where >
      <include refid="Map_Where_Clause" />
    </where>
  </delete>
  <update id="updateSelectiveById" parameterType="cn.com.hugedata.spark.commons.storage.entity.PmMonthInvest" >
    update pm_month_invest
    <set >
      <if test="reportId != null" >
        REPORT_ID = #{reportId,jdbcType=INTEGER},
      </if>
      <if test="comeTypeId != null" >
        COME_TYPE_ID = #{comeTypeId,jdbcType=INTEGER},
      </if>
      <if test="comeTypeName != null" >
        COME_TYPE_NAME = #{comeTypeName,jdbcType=VARCHAR},
      </if>
      <if test="comeFrom != null" >
        COME_FROM = #{comeFrom,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        AMOUNT = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="projectId != null" >
        PROJECT_ID = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="investMonth != null" >
        INVEST_MONTH = #{investMonth,jdbcType=CHAR},
      </if>
      <if test="investStatus != null" >
        INVEST_STATUS = #{investStatus,jdbcType=INTEGER},
      </if>
    </set>
    where INVEST_ID = #{investId,jdbcType=INTEGER}
  </update>
  <update id="updateSelectiveByMap" parameterType="map" >
    update pm_month_invest pmi
    <set >
      <if test="record.investId != null" >
        INVEST_ID = #{record.investId,jdbcType=INTEGER},
      </if>
      <if test="record.reportId != null" >
        REPORT_ID = #{record.reportId,jdbcType=INTEGER},
      </if>
      <if test="record.comeTypeId != null" >
        COME_TYPE_ID = #{record.comeTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.comeTypeName != null" >
        COME_TYPE_NAME = #{record.comeTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.comeFrom != null" >
        COME_FROM = #{record.comeFrom,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        AMOUNT = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.projectId != null" >
        PROJECT_ID = #{record.projectId,jdbcType=INTEGER},
      </if>
      <if test="record.investMonth != null" >
        INVEST_MONTH = #{record.investMonth,jdbcType=CHAR},
      </if>
      <if test="record.investStatus != null" >
        INVEST_STATUS = #{record.investStatus,jdbcType=INTEGER},
      </if>
    </set>
    <where >
      <if test="null != map.investId" >
        and pmi.INVEST_ID = #{map.investId}
      </if>
      <if test="null != map.list_investId" >
        and pmi.INVEST_ID in (<foreach collection="map.list_investId" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.reportId" >
        and pmi.REPORT_ID = #{map.reportId}
      </if>
      <if test="null != map.list_reportId" >
        and pmi.REPORT_ID in (<foreach collection="map.list_reportId" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.comeTypeId" >
        and pmi.COME_TYPE_ID = #{map.comeTypeId}
      </if>
      <if test="null != map.list_comeTypeId" >
        and pmi.COME_TYPE_ID in (<foreach collection="map.list_comeTypeId" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.comeTypeName" >
        and pmi.COME_TYPE_NAME = #{map.comeTypeName}
      </if>
      <if test="null != map.like_comeTypeName" >
        and pmi.COME_TYPE_NAME like '%' || #{map.like_comeTypeName} || '%'
      </if>
      <if test="null != map.list_comeTypeName" >
        and pmi.COME_TYPE_NAME in (<foreach collection="map.list_comeTypeName" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.comeFrom" >
        and pmi.COME_FROM = #{map.comeFrom}
      </if>
      <if test="null != map.like_comeFrom" >
        and pmi.COME_FROM like '%' || #{map.like_comeFrom} || '%'
      </if>
      <if test="null != map.list_comeFrom" >
        and pmi.COME_FROM in (<foreach collection="map.list_comeFrom" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.amount" >
        and pmi.AMOUNT = #{map.amount}
      </if>
      <if test="null != map.list_amount" >
        and pmi.AMOUNT in (<foreach collection="map.list_amount" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.projectId" >
        and pmi.PROJECT_ID = #{map.projectId}
      </if>
      <if test="null != map.list_projectId" >
        and pmi.PROJECT_ID in (<foreach collection="map.list_projectId" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.investMonth" >
        and pmi.INVEST_MONTH = #{map.investMonth}
      </if>
      <if test="null != map.like_investMonth" >
        and pmi.INVEST_MONTH like '%' || #{map.like_investMonth} || '%'
      </if>
      <if test="null != map.list_investMonth" >
        and pmi.INVEST_MONTH in (<foreach collection="map.list_investMonth" item="i" separator=",">#{i}</foreach>)
      </if>
      <if test="null != map.investStatus" >
        and pmi.INVEST_STATUS = #{map.investStatus}
      </if>
      <if test="null != map.list_investStatus" >
        and pmi.INVEST_STATUS in (<foreach collection="map.list_investStatus" item="i" separator=",">#{i}</foreach>)
      </if>
    </where>
  </update>
</mapper>